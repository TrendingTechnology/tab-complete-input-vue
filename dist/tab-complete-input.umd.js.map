{"version":3,"file":"tab-complete-input.umd.js","sources":["../src/lib/trie.js","../src/tab-complete-input.js"],"sourcesContent":["/**\r\n * Copyright (C) 2012 Paul Thurlow\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @decription Trie class for saving data by keywords accessible through\r\n *   word prefixes\r\n * @class\r\n * @version 0.1.5\r\n */\r\nclass Triejs {\r\n  constructor(opts) {\r\n    /**\r\n     * @private\r\n     * @description Options for trie implementation\r\n     * @type {Object}\r\n     */\r\n    this.options = {\r\n      /**\r\n       * @description Whether to handle caching on node levels\r\n       * @type {Boolean}\r\n       */\r\n      enableCache: true,\r\n\r\n      /**\r\n       * @description Maintain insert ordering when adding to non cached trie\r\n       * @type {Boolean}\r\n       */\r\n      insertOrder: false,\r\n\r\n      /**\r\n       * @description Return responses from root when requests is empty\r\n       * @type {Boolean}\r\n       */\r\n      returnRoot: false,\r\n\r\n      /**\r\n       * @description Insert function for adding new items to cache\r\n       * @type {Function}\r\n       */\r\n      insert: null,\r\n\r\n      /**\r\n       * @description Sorting function for sorting items to cache\r\n       * @type {Function}\r\n       */\r\n      sort: null,\r\n\r\n      /**\r\n       * @description Clip function for removing old items from cache\r\n       * @type {Function}\r\n       */\r\n      clip: null,\r\n\r\n      /**\r\n       * @description copy function for copying data between nodes\r\n       * @type {Function}\r\n       */\r\n      copy: null,\r\n\r\n      /**\r\n       * @description Merge function to merge two data sets together\r\n       * @type {Function}\r\n       */\r\n      merge: null\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @description trie object\r\n     * @type {Object}\r\n     */\r\n    this.root = {}\r\n\r\n    /**\r\n     * @private\r\n     * @description insert order index\r\n     * @type {Number}\r\n     */\r\n    this.index = 0\r\n\r\n    // mixin optional override options\r\n    for (const key in opts) {\r\n      if (opts.hasOwnProperty(key)) {\r\n        this.options[key] = opts[key]\r\n      }\r\n    }\r\n\r\n    if (typeof this.options.insert != 'function') {\r\n      this.options.insert = function(target, data) {\r\n        // if maintaining insert ordering add a order index on insert\r\n        if (\r\n          this.options.insertOrder &&\r\n          typeof data.d === 'undefined' &&\r\n          typeof data.o === 'undefined'\r\n        ) {\r\n          data = { d: data, o: this.index++ }\r\n        }\r\n        if (target && target.length) {\r\n          target.push(data)\r\n        } else {\r\n          target = [data]\r\n        }\r\n        return target\r\n      }\r\n    }\r\n    if (typeof this.options.sort != 'function') {\r\n      if (!this.options.insertOrder) {\r\n        this.options.sort = function() {\r\n          this.sort()\r\n        }\r\n      } else if (this.options.insertOrder) {\r\n        this.options.sort = function() {\r\n          this.sort((a, b) => a.o - b.o)\r\n        }\r\n      }\r\n    }\r\n    if (typeof this.options.clip != 'function') {\r\n      this.options.clip = function(max) {\r\n        if (this.length > max) {\r\n          this.splice(max, this.length - max)\r\n        }\r\n      }\r\n    }\r\n    if (typeof this.options.copy != 'function') {\r\n      this.options.copy = data => data.slice(0)\r\n    }\r\n    if (typeof this.options.merge != 'function') {\r\n      this.options.merge = function(target, data, word) {\r\n        for (let i = 0, ii = data.length; i < ii; i++) {\r\n          target = this.options.insert.call(this, target, data[i])\r\n          this.options.sort.call(target, word)\r\n        }\r\n        return target\r\n      }\r\n    }\r\n  }\r\n\r\n  /*-------------------------------------------------------------------------\r\n  * Private Functions\r\n  -------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * @description Add data to the current nodes cache\r\n   * @param curr {Object} current node in trie\r\n   * @param data {Object} Data to add to the cache\r\n   * @private\r\n   */\r\n  _addCacheData(curr, data) {\r\n    if (\r\n      (this.root === curr && !this.options.returnRoot) ||\r\n      this.options.enableCache === false\r\n    ) {\r\n      return false\r\n    }\r\n    if (!curr.$d) {\r\n      curr.$d = {}\r\n    }\r\n    curr.$d = this.options.insert.call(this, curr.$d, data)\r\n    this.options.sort.call(curr.$d)\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @description Adds the remainder of a word to a subtree\r\n   * @param suffix {String} the remainder of a word\r\n   * @param data {Object} data to add at suffix\r\n   * @param curr {Object} current node in the trie\r\n   * @private\r\n   */\r\n  _addSuffix(suffix, data, curr) {\r\n    const letter = suffix.charAt(0)\r\n    const nextSuffix = suffix.substring(1) || null\r\n    const opts = { $d: {} }\r\n    if (nextSuffix) {\r\n      opts.$s = nextSuffix\r\n    }\r\n    if (typeof curr[letter] === 'undefined') {\r\n      curr[letter] = opts\r\n    } else if (typeof curr[letter].$d === 'undefined') {\r\n      curr[letter].$d = {}\r\n      if (nextSuffix && typeof curr[letter].$s === 'undefined') {\r\n        curr[letter].$s = nextSuffix\r\n      }\r\n    }\r\n    curr[letter].$d = this.options.insert.call(this, curr[letter].$d, data)\r\n    this.options.sort.call(curr[letter].$d)\r\n  }\r\n\r\n  /**\r\n   * @description Move data from current location to new suffix position\r\n   * @param suffix {String} the remainder of a word\r\n   * @param data {Object} data currently stored to be moved to suffix ending\r\n   * @param curr {Object} current node in the trie\r\n   * @private\r\n   */\r\n  _moveSuffix(suffix, data, curr) {\r\n    const letter = suffix.charAt(0)\r\n    const nextSuffix = suffix.substring(1) || null\r\n    const opts = { $d: {} }\r\n    if (nextSuffix) {\r\n      opts.$s = nextSuffix\r\n    }\r\n    if (typeof curr[letter] === 'undefined') {\r\n      curr[letter] = opts\r\n    }\r\n    curr[letter].$d = this.options.copy(data)\r\n  }\r\n\r\n  /**\r\n   * @description Get data from a given node, either in the cache\r\n   *   or by parsing the subtree\r\n   * @param node {Object} The node to get data from\r\n   * @return {Array|Object} data results\r\n   */\r\n  _getDataAtNode(node, word) {\r\n    let data\r\n\r\n    if (this.options.enableCache) {\r\n      this.options.sort.call(node.$d, word)\r\n      data = node.$d\r\n    } else {\r\n      data = this._getSubtree(node, word)\r\n    }\r\n    if (this.options.insertOrder) {\r\n      data = this._stripInsertOrder(data)\r\n    }\r\n    return data ? this.options.copy(data) : undefined\r\n  }\r\n\r\n  /**\r\n   * @description Remove the outer data later that stores insert order\r\n   * @param data {Object} The data with insert order object wrapper\r\n   * @return {Array} data results without insert order wrapper\r\n   */\r\n  _stripInsertOrder(data) {\r\n    if (typeof data == 'undefined') {\r\n      return\r\n    }\r\n    const temp = []\r\n    for (let i = 0, ii = data.length; i < ii; i++) {\r\n      temp.push(data[i].d)\r\n    }\r\n    return temp\r\n  }\r\n\r\n  /**\r\n   * @description Get the subtree data of a trie traversing depth first\r\n   * @param curr {Object} current node in the trie to get data under\r\n   * @return {Object} data from the subtree\r\n   */\r\n  _getSubtree(curr, word) {\r\n    let res\r\n    const nodeArray = [curr]\r\n    let node\r\n    while ((node = nodeArray.pop())) {\r\n      for (const newNode in node) {\r\n        if (node.hasOwnProperty(newNode)) {\r\n          if (newNode == '$d') {\r\n            if (typeof res == 'undefined') {\r\n              res = []\r\n            }\r\n            res = this.options.merge.call(this, res, node.$d, word)\r\n          } else if (newNode != '$s') {\r\n            nodeArray.push(node[newNode])\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  /*-------------------------------------------------------------------------\r\n  * Public Functions\r\n  -------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * @description Adds a word into the trie\r\n   * @param word {String} word to add\r\n   * @param data {Object} data to store under given term\r\n   */\r\n  add(word, data) {\r\n    if (typeof word != 'string') {\r\n      return false\r\n    }\r\n    if (arguments.length == 1) {\r\n      data = word\r\n    }\r\n    word = word.toLowerCase()\r\n\r\n    let curr = this.root\r\n\r\n    for (let i = 0, ii = word.length; i < ii; i++) {\r\n      const letter = word.charAt(i)\r\n      // No letter at this level\r\n      if (!curr[letter]) {\r\n        // Current level has a suffix already so push suffix lower in trie\r\n        if (curr.$s) {\r\n          if (curr.$s == word.substring(i)) {\r\n            // special case where word exists already, so we avoid breaking\r\n            // up the substring and store both at the top level\r\n            if (!this._addCacheData(curr, data)) {\r\n              curr.$d = this.options.insert.call(this, curr.$d, data)\r\n              this.options.sort.call(curr.$d)\r\n            }\r\n            break\r\n          }\r\n          this._moveSuffix(curr.$s, curr.$d, curr)\r\n          delete curr.$s\r\n          if (this.options.enableCache === false) {\r\n            delete curr.$d\r\n          }\r\n        }\r\n        // Current level has no sub letter after building suffix\r\n        if (!curr[letter]) {\r\n          this._addSuffix(word.substring(i), data, curr)\r\n          this._addCacheData(curr, data)\r\n          break\r\n        }\r\n        // add to the cache at the current node level in the trie\r\n        this._addCacheData(curr, data)\r\n        // if its the end of a word push possible suffixes at this node down\r\n        // and add data to cache at the words end\r\n        if (i == ii - 1) {\r\n          if (curr[letter].$s) {\r\n            this._moveSuffix(curr[letter].$s, curr[letter].$d, curr[letter])\r\n            delete curr[letter].$s\r\n            if (this.options.enableCache === false) {\r\n              delete curr[letter].$d\r\n            }\r\n            // insert new data at current end of word node level\r\n            this._addSuffix(letter, data, curr)\r\n          } else {\r\n            // either add to cache or just add the data at end of word node\r\n            if (!this._addCacheData(curr[letter], data)) {\r\n              this._addSuffix(letter, data, curr)\r\n            }\r\n          }\r\n        }\r\n        curr = curr[letter]\r\n      }\r\n      // There is a letter and we are at the end of the word\r\n      else if (i == ii - 1) {\r\n        this._addCacheData(curr, data)\r\n        // either add to cache at the end of the word or just add the data\r\n        if (!this._addCacheData(curr[letter], data)) {\r\n          this._addSuffix(letter, data, curr)\r\n        }\r\n      }\r\n      // There is a letter so traverse lower into the trie\r\n      else {\r\n        this._addCacheData(curr, data)\r\n        curr = curr[letter]\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description see if a word has been added to the trie\r\n   * @param word {String} word to search for\r\n   * @return {Boolean} whether word exists or not\r\n   */\r\n  contains(word) {\r\n    if (typeof word !== 'string' || word == '') {\r\n      return false\r\n    }\r\n    word = word.toLowerCase()\r\n\r\n    let curr = this.root\r\n    for (let i = 0, ii = word.length; i < ii; i++) {\r\n      const letter = word.charAt(i)\r\n      if (!curr[letter]) {\r\n        if (curr.$s && curr.$s === word.substring(i)) {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      } else {\r\n        curr = curr[letter]\r\n      }\r\n    }\r\n    return curr.$d && typeof curr.$s === 'undefined' ? true : false\r\n  }\r\n\r\n  /**\r\n   * @description Get the data for a given prefix of a word\r\n   * @param prefix {String} string of the prefix of a word\r\n   * @return {Array|Object} data for the given prefix\r\n   */\r\n  find(prefix) {\r\n    if (typeof prefix !== 'string') {\r\n      return undefined\r\n    }\r\n    if (prefix == '' && !this.options.returnRoot) {\r\n      return undefined\r\n    }\r\n    prefix = prefix.toLowerCase()\r\n\r\n    let curr = this.root\r\n    for (let i = 0, ii = prefix.length; i < ii; i++) {\r\n      const letter = prefix.charAt(i)\r\n      if (!curr[letter]) {\r\n        if (curr.$s && curr.$s.indexOf(prefix.substring(i)) == 0) {\r\n          return this._getDataAtNode(curr, prefix)\r\n        } else {\r\n          return undefined\r\n        }\r\n      } else {\r\n        curr = curr[letter]\r\n      }\r\n    }\r\n    return this._getDataAtNode(curr, prefix)\r\n  }\r\n}\r\n\r\nexport default Triejs\r\n","import TrieJS from './lib/trie'\r\n\r\nexport default {\r\n  name: 'tab-complete-input',\r\n  data() {\r\n    return {\r\n      trie: new TrieJS(),\r\n      position: 0,\r\n      wordPos: 0,\r\n      index: 0,\r\n      words: [],\r\n      word: '',\r\n      dynamicData: false,\r\n      possible: false,\r\n      saved: false,\r\n      localValue: this.value\r\n    }\r\n  },\r\n  render(h) {\r\n    var self = this\r\n    return h('input', {\r\n      ref: 'input',\r\n      attrs: {\r\n        ...self.$props\r\n      },\r\n      domProps: {\r\n        value: self.value\r\n      },\r\n      directives: [\r\n        {\r\n          name: 'model',\r\n          rawName: 'v-model',\r\n          value: self.localValue,\r\n          expression: 'value'\r\n        }\r\n      ],\r\n      on: {\r\n        ...self.$listeners,\r\n        keydown: self.$listeners.keydown\r\n          ? [self.tabComplete, self.$listeners.keydown]\r\n          : self.tabComplete,\r\n        input(event) {\r\n          self.localValue = event.target.value\r\n          self.$emit('input', event.target.value)\r\n        }\r\n      }\r\n    })\r\n  },\r\n  created() {\r\n    this.dynamicData = this.dataSource instanceof Function\r\n\r\n    if (!this.dynamicData) {\r\n      this.setData(this.dataSource)\r\n    }\r\n  },\r\n  props: {\r\n    dataSource: {\r\n      default: () => []\r\n    },\r\n    format: {\r\n      default: (word, prev, pos) => ({ word, prev, pos }),\r\n      type: Function\r\n    },\r\n    value: {\r\n      default: '',\r\n      type: String\r\n    }\r\n  },\r\n  watch: {\r\n    // whenever dataSource changes, this function will run\r\n    dataSource(data) {\r\n      this.dynamicData = data instanceof Function\r\n\r\n      if (!this.dynamicData) {\r\n        this.setData(data)\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    setData(array) {\r\n      this.trie = new TrieJS()\r\n      array.forEach(element => {\r\n        this.trie.add(element)\r\n      })\r\n    },\r\n\r\n    async tabComplete(e) {\r\n      if (e && e.keyCode !== 9) {\r\n        this.saved = false\r\n        this.index = 0\r\n\r\n        return\r\n      }\r\n      if (!this.saved) {\r\n        this.position = this.getCursorPos()\r\n        const newValue =\r\n          this.localValue.slice(0, this.position) +\r\n          ' ' +\r\n          this.localValue.slice(this.position)\r\n\r\n        this.words = newValue.split(' ')\r\n        var lcount = 0\r\n        for (var i = 0; i < this.words.length; i++) {\r\n          var w = this.words[i]\r\n          lcount += w.length + 1\r\n          if (lcount >= this.position) {\r\n            this.word = this.words[i]\r\n            this.wordPos = i\r\n            break\r\n          }\r\n        }\r\n\r\n        if (this.word != '' && e) {\r\n          e.preventDefault()\r\n        }\r\n\r\n        if (this.dynamicData) {\r\n          let data = this.dataSource(this.word, this.wordPos)\r\n          var array = await data\r\n          this.setData(array)\r\n        }\r\n\r\n        this.saved = true\r\n        this.possible = this.trie.find(this.word)\r\n      } else {\r\n        this.index++\r\n      }\r\n\r\n      if (this.possible && this.index >= this.possible.length) {\r\n        this.index = 0\r\n      }\r\n\r\n      if (this.possible) {\r\n        if (e) e.preventDefault()\r\n        let dupe = this.words\r\n        let completion = this.possible[this.index]\r\n        let prev = ''\r\n\r\n        if (dupe.length > 1) {\r\n          prev = dupe[this.wordPos - 1]\r\n        }\r\n\r\n        let res = this.format(completion, prev, this.wordPos)\r\n        dupe[this.wordPos] = res.word\r\n        if (res.prev) dupe[this.wordPos - 1] = res.prev\r\n\r\n        let newPos = this.words.slice(0, this.wordPos + 1).join(' ').length\r\n        this.localValue = dupe.join(' ')\r\n        this.localValue =\r\n          this.localValue.slice(0, newPos) + this.localValue.slice(newPos + 1)\r\n        this.updateValue(this.localValue)\r\n        this.$nextTick(() => this.selectRange(newPos, newPos))\r\n      }\r\n    },\r\n\r\n    updateValue(value) {\r\n      this.localValue = value\r\n      this.$emit('input', value)\r\n    },\r\n\r\n    selectRange(start, end) {\r\n      this.$el.focus()\r\n      this.$el.setSelectionRange(start, end)\r\n    },\r\n\r\n    getCursorPos() {\r\n      return this.$el.selectionStart\r\n    }\r\n  }\r\n}\r\n"],"names":["Triejs","constructor","opts","const","key","options","root","index","hasOwnProperty","this","insert","target","data","insertOrder","d","o","length","push","sort","a","b","clip","max","splice","copy","slice","merge","word","let","i","ii","call","_addCacheData","curr","returnRoot","enableCache","$d","_addSuffix","suffix","letter","charAt","nextSuffix","substring","$s","_moveSuffix","_getDataAtNode","node","_getSubtree","_stripInsertOrder","undefined","temp","res","nodeArray","pop","newNode","add","arguments","toLowerCase","contains","find","prefix","indexOf","name","trie","TrieJS","position","wordPos","words","dynamicData","possible","saved","localValue","value","render","h","self","ref","attrs","Object","$props","domProps","directives","rawName","expression","on","$listeners","keydown","tabComplete","input","event","$emit","created","dataSource","Function","setData","props","default","format","prev","pos","type","String","watch","methods","array","forEach","element","e","_this","preventDefault","dupe","newPos","join","updateValue","$nextTick","selectRange","keyCode","getCursorPos","newValue","split","lcount","start","end","$el","focus","setSelectionRange","selectionStart"],"mappings":"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"}