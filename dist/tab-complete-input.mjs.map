{"version":3,"file":"tab-complete-input.mjs","sources":["../src/lib/trie.js","../src/tab-complete-input.ts"],"sourcesContent":["/**\r\n * Copyright (C) 2012 Paul Thurlow\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @decription Trie class for saving data by keywords accessible through\r\n *   word prefixes\r\n * @class\r\n * @version 0.1.5\r\n */\r\nclass Triejs {\r\n  constructor(opts) {\r\n    /**\r\n     * @private\r\n     * @description Options for trie implementation\r\n     * @type {Object}\r\n     */\r\n    this.options = {\r\n      /**\r\n       * @description Whether to handle caching on node levels\r\n       * @type {Boolean}\r\n       */\r\n      enableCache: true,\r\n\r\n      /**\r\n       * @description Maintain insert ordering when adding to non cached trie\r\n       * @type {Boolean}\r\n       */\r\n      insertOrder: false,\r\n\r\n      /**\r\n       * @description Return responses from root when requests is empty\r\n       * @type {Boolean}\r\n       */\r\n      returnRoot: false,\r\n\r\n      /**\r\n       * @description Insert function for adding new items to cache\r\n       * @type {Function}\r\n       */\r\n      insert: null,\r\n\r\n      /**\r\n       * @description Sorting function for sorting items to cache\r\n       * @type {Function}\r\n       */\r\n      sort: null,\r\n\r\n      /**\r\n       * @description Clip function for removing old items from cache\r\n       * @type {Function}\r\n       */\r\n      clip: null,\r\n\r\n      /**\r\n       * @description copy function for copying data between nodes\r\n       * @type {Function}\r\n       */\r\n      copy: null,\r\n\r\n      /**\r\n       * @description Merge function to merge two data sets together\r\n       * @type {Function}\r\n       */\r\n      merge: null\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @description trie object\r\n     * @type {Object}\r\n     */\r\n    this.root = {}\r\n\r\n    /**\r\n     * @private\r\n     * @description insert order index\r\n     * @type {Number}\r\n     */\r\n    this.index = 0\r\n\r\n    // mixin optional override options\r\n    for (const key in opts) {\r\n      if (opts.hasOwnProperty(key)) {\r\n        this.options[key] = opts[key]\r\n      }\r\n    }\r\n\r\n    if (typeof this.options.insert != 'function') {\r\n      this.options.insert = function(target, data) {\r\n        // if maintaining insert ordering add a order index on insert\r\n        if (\r\n          this.options.insertOrder &&\r\n          typeof data.d === 'undefined' &&\r\n          typeof data.o === 'undefined'\r\n        ) {\r\n          data = { d: data, o: this.index++ }\r\n        }\r\n        if (target && target.length) {\r\n          target.push(data)\r\n        } else {\r\n          target = [data]\r\n        }\r\n        return target\r\n      }\r\n    }\r\n    if (typeof this.options.sort != 'function') {\r\n      if (!this.options.insertOrder) {\r\n        this.options.sort = function() {\r\n          this.sort()\r\n        }\r\n      } else if (this.options.insertOrder) {\r\n        this.options.sort = function() {\r\n          this.sort((a, b) => a.o - b.o)\r\n        }\r\n      }\r\n    }\r\n    if (typeof this.options.clip != 'function') {\r\n      this.options.clip = function(max) {\r\n        if (this.length > max) {\r\n          this.splice(max, this.length - max)\r\n        }\r\n      }\r\n    }\r\n    if (typeof this.options.copy != 'function') {\r\n      this.options.copy = data => data.slice(0)\r\n    }\r\n    if (typeof this.options.merge != 'function') {\r\n      this.options.merge = function(target, data, word) {\r\n        for (let i = 0, ii = data.length; i < ii; i++) {\r\n          target = this.options.insert.call(this, target, data[i])\r\n          this.options.sort.call(target, word)\r\n        }\r\n        return target\r\n      }\r\n    }\r\n  }\r\n\r\n  /*-------------------------------------------------------------------------\r\n  * Private Functions\r\n  -------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * @description Add data to the current nodes cache\r\n   * @param curr {Object} current node in trie\r\n   * @param data {Object} Data to add to the cache\r\n   * @private\r\n   */\r\n  _addCacheData(curr, data) {\r\n    if (\r\n      (this.root === curr && !this.options.returnRoot) ||\r\n      this.options.enableCache === false\r\n    ) {\r\n      return false\r\n    }\r\n    if (!curr.$d) {\r\n      curr.$d = {}\r\n    }\r\n    curr.$d = this.options.insert.call(this, curr.$d, data)\r\n    this.options.sort.call(curr.$d)\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @description Adds the remainder of a word to a subtree\r\n   * @param suffix {String} the remainder of a word\r\n   * @param data {Object} data to add at suffix\r\n   * @param curr {Object} current node in the trie\r\n   * @private\r\n   */\r\n  _addSuffix(suffix, data, curr) {\r\n    const letter = suffix.charAt(0)\r\n    const nextSuffix = suffix.substring(1) || null\r\n    const opts = { $d: {} }\r\n    if (nextSuffix) {\r\n      opts.$s = nextSuffix\r\n    }\r\n    if (typeof curr[letter] === 'undefined') {\r\n      curr[letter] = opts\r\n    } else if (typeof curr[letter].$d === 'undefined') {\r\n      curr[letter].$d = {}\r\n      if (nextSuffix && typeof curr[letter].$s === 'undefined') {\r\n        curr[letter].$s = nextSuffix\r\n      }\r\n    }\r\n    curr[letter].$d = this.options.insert.call(this, curr[letter].$d, data)\r\n    this.options.sort.call(curr[letter].$d)\r\n  }\r\n\r\n  /**\r\n   * @description Move data from current location to new suffix position\r\n   * @param suffix {String} the remainder of a word\r\n   * @param data {Object} data currently stored to be moved to suffix ending\r\n   * @param curr {Object} current node in the trie\r\n   * @private\r\n   */\r\n  _moveSuffix(suffix, data, curr) {\r\n    const letter = suffix.charAt(0)\r\n    const nextSuffix = suffix.substring(1) || null\r\n    const opts = { $d: {} }\r\n    if (nextSuffix) {\r\n      opts.$s = nextSuffix\r\n    }\r\n    if (typeof curr[letter] === 'undefined') {\r\n      curr[letter] = opts\r\n    }\r\n    curr[letter].$d = this.options.copy(data)\r\n  }\r\n\r\n  /**\r\n   * @description Get data from a given node, either in the cache\r\n   *   or by parsing the subtree\r\n   * @param node {Object} The node to get data from\r\n   * @return {Array|Object} data results\r\n   */\r\n  _getDataAtNode(node, word) {\r\n    let data\r\n\r\n    if (this.options.enableCache) {\r\n      this.options.sort.call(node.$d, word)\r\n      data = node.$d\r\n    } else {\r\n      data = this._getSubtree(node, word)\r\n    }\r\n    if (this.options.insertOrder) {\r\n      data = this._stripInsertOrder(data)\r\n    }\r\n    return data ? this.options.copy(data) : undefined\r\n  }\r\n\r\n  /**\r\n   * @description Remove the outer data later that stores insert order\r\n   * @param data {Object} The data with insert order object wrapper\r\n   * @return {Array} data results without insert order wrapper\r\n   */\r\n  _stripInsertOrder(data) {\r\n    if (typeof data == 'undefined') {\r\n      return\r\n    }\r\n    const temp = []\r\n    for (let i = 0, ii = data.length; i < ii; i++) {\r\n      temp.push(data[i].d)\r\n    }\r\n    return temp\r\n  }\r\n\r\n  /**\r\n   * @description Get the subtree data of a trie traversing depth first\r\n   * @param curr {Object} current node in the trie to get data under\r\n   * @return {Object} data from the subtree\r\n   */\r\n  _getSubtree(curr, word) {\r\n    let res\r\n    const nodeArray = [curr]\r\n    let node\r\n    while ((node = nodeArray.pop())) {\r\n      for (const newNode in node) {\r\n        if (node.hasOwnProperty(newNode)) {\r\n          if (newNode == '$d') {\r\n            if (typeof res == 'undefined') {\r\n              res = []\r\n            }\r\n            res = this.options.merge.call(this, res, node.$d, word)\r\n          } else if (newNode != '$s') {\r\n            nodeArray.push(node[newNode])\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  /*-------------------------------------------------------------------------\r\n  * Public Functions\r\n  -------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * @description Adds a word into the trie\r\n   * @param word {String} word to add\r\n   * @param data {Object} data to store under given term\r\n   */\r\n  add(word, data) {\r\n    if (typeof word != 'string') {\r\n      return false\r\n    }\r\n    if (arguments.length == 1) {\r\n      data = word\r\n    }\r\n    word = word.toLowerCase()\r\n\r\n    let curr = this.root\r\n\r\n    for (let i = 0, ii = word.length; i < ii; i++) {\r\n      const letter = word.charAt(i)\r\n      // No letter at this level\r\n      if (!curr[letter]) {\r\n        // Current level has a suffix already so push suffix lower in trie\r\n        if (curr.$s) {\r\n          if (curr.$s == word.substring(i)) {\r\n            // special case where word exists already, so we avoid breaking\r\n            // up the substring and store both at the top level\r\n            if (!this._addCacheData(curr, data)) {\r\n              curr.$d = this.options.insert.call(this, curr.$d, data)\r\n              this.options.sort.call(curr.$d)\r\n            }\r\n            break\r\n          }\r\n          this._moveSuffix(curr.$s, curr.$d, curr)\r\n          delete curr.$s\r\n          if (this.options.enableCache === false) {\r\n            delete curr.$d\r\n          }\r\n        }\r\n        // Current level has no sub letter after building suffix\r\n        if (!curr[letter]) {\r\n          this._addSuffix(word.substring(i), data, curr)\r\n          this._addCacheData(curr, data)\r\n          break\r\n        }\r\n        // add to the cache at the current node level in the trie\r\n        this._addCacheData(curr, data)\r\n        // if its the end of a word push possible suffixes at this node down\r\n        // and add data to cache at the words end\r\n        if (i == ii - 1) {\r\n          if (curr[letter].$s) {\r\n            this._moveSuffix(curr[letter].$s, curr[letter].$d, curr[letter])\r\n            delete curr[letter].$s\r\n            if (this.options.enableCache === false) {\r\n              delete curr[letter].$d\r\n            }\r\n            // insert new data at current end of word node level\r\n            this._addSuffix(letter, data, curr)\r\n          } else {\r\n            // either add to cache or just add the data at end of word node\r\n            if (!this._addCacheData(curr[letter], data)) {\r\n              this._addSuffix(letter, data, curr)\r\n            }\r\n          }\r\n        }\r\n        curr = curr[letter]\r\n      }\r\n      // There is a letter and we are at the end of the word\r\n      else if (i == ii - 1) {\r\n        this._addCacheData(curr, data)\r\n        // either add to cache at the end of the word or just add the data\r\n        if (!this._addCacheData(curr[letter], data)) {\r\n          this._addSuffix(letter, data, curr)\r\n        }\r\n      }\r\n      // There is a letter so traverse lower into the trie\r\n      else {\r\n        this._addCacheData(curr, data)\r\n        curr = curr[letter]\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description see if a word has been added to the trie\r\n   * @param word {String} word to search for\r\n   * @return {Boolean} whether word exists or not\r\n   */\r\n  contains(word) {\r\n    if (typeof word !== 'string' || word == '') {\r\n      return false\r\n    }\r\n    word = word.toLowerCase()\r\n\r\n    let curr = this.root\r\n    for (let i = 0, ii = word.length; i < ii; i++) {\r\n      const letter = word.charAt(i)\r\n      if (!curr[letter]) {\r\n        if (curr.$s && curr.$s === word.substring(i)) {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      } else {\r\n        curr = curr[letter]\r\n      }\r\n    }\r\n    return curr.$d && typeof curr.$s === 'undefined' ? true : false\r\n  }\r\n\r\n  /**\r\n   * @description Get the data for a given prefix of a word\r\n   * @param prefix {String} string of the prefix of a word\r\n   * @return {Array|Object} data for the given prefix\r\n   */\r\n  find(prefix) {\r\n    if (typeof prefix !== 'string') {\r\n      return undefined\r\n    }\r\n    if (prefix == '' && !this.options.returnRoot) {\r\n      return undefined\r\n    }\r\n    prefix = prefix.toLowerCase()\r\n\r\n    let curr = this.root\r\n    for (let i = 0, ii = prefix.length; i < ii; i++) {\r\n      const letter = prefix.charAt(i)\r\n      if (!curr[letter]) {\r\n        if (curr.$s && curr.$s.indexOf(prefix.substring(i)) == 0) {\r\n          return this._getDataAtNode(curr, prefix)\r\n        } else {\r\n          return undefined\r\n        }\r\n      } else {\r\n        curr = curr[letter]\r\n      }\r\n    }\r\n    return this._getDataAtNode(curr, prefix)\r\n  }\r\n}\r\n\r\nexport default Triejs\r\n","import TrieJS from './lib/trie'\r\nimport Vue, { PropType } from 'vue'\r\n\r\ninterface FormatResult {\r\n  word: String\r\n  prev: String\r\n}\r\n\r\nconst FormatFunction = (word: String, prev: String, pos: Number): FormatResult => ({ word, prev })\r\n\r\nexport default Vue.extend({\r\n  name: 'tab-complete-input',\r\n  data() {\r\n    return {\r\n      trie: new TrieJS(),\r\n      position: 0,\r\n      wordPos: 0,\r\n      index: 0,\r\n      words: [],\r\n      word: '',\r\n      dynamicData: false,\r\n      possible: false,\r\n      saved: false,\r\n      localValue: this.value\r\n    }\r\n  },\r\n  render(h) {\r\n    var self = this\r\n    return h('input', {\r\n      ref: 'input',\r\n      attrs: {\r\n        ...self.$props\r\n      },\r\n      domProps: {\r\n        value: self.value\r\n      },\r\n      directives: [\r\n        {\r\n          name: 'model',\r\n          value: self.localValue,\r\n          expression: 'value'\r\n        }\r\n      ],\r\n      on: {\r\n        ...self.$listeners,\r\n        keydown: self.$listeners.keydown\r\n          ? [self.tabComplete, self.$listeners.keydown]\r\n          : self.tabComplete,\r\n        input(event) {\r\n          self.localValue = event.target.value\r\n          self.$emit('input', event.target.value)\r\n        }\r\n      }\r\n    })\r\n  },\r\n  created() {\r\n    this.dynamicData = this.dataSource instanceof Function\r\n\r\n    if (!this.dynamicData) {\r\n      this.setData(this.dataSource)\r\n    }\r\n  },\r\n  props: {\r\n    dataSource: {\r\n      default: () => []\r\n    },\r\n    format: {\r\n      default: FormatFunction,\r\n      type: Function as PropType<typeof FormatFunction>\r\n    },\r\n    value: {\r\n      default: '',\r\n      type: String\r\n    }\r\n  },\r\n  watch: {\r\n    // whenever dataSource changes, this function will run\r\n    dataSource(data) {\r\n      this.dynamicData = data instanceof Function\r\n\r\n      if (!this.dynamicData) {\r\n        this.setData(data)\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    setData(array) {\r\n      this.trie = new TrieJS()\r\n      array.forEach(element => {\r\n        this.trie.add(element)\r\n      })\r\n    },\r\n\r\n    async tabComplete(e) {\r\n      if (e && e.keyCode !== 9) {\r\n        this.saved = false\r\n        this.index = 0\r\n\r\n        return\r\n      }\r\n      if (!this.saved) {\r\n        this.position = this.getCursorPos()\r\n        const newValue =\r\n          this.localValue.slice(0, this.position) +\r\n          ' ' +\r\n          this.localValue.slice(this.position)\r\n\r\n        this.words = newValue.split(' ')\r\n        var lcount = 0\r\n        for (var i = 0; i < this.words.length; i++) {\r\n          var w = this.words[i]\r\n          lcount += w.length + 1\r\n          if (lcount >= this.position) {\r\n            this.word = this.words[i]\r\n            this.wordPos = i\r\n            break\r\n          }\r\n        }\r\n\r\n        if (this.word != '' && e) {\r\n          e.preventDefault()\r\n        }\r\n\r\n        if (this.dynamicData) {\r\n          let data = this.dataSource(this.word, this.wordPos)\r\n          var array = await data\r\n          this.setData(array)\r\n        }\r\n\r\n        this.saved = true\r\n        this.possible = this.trie.find(this.word)\r\n      } else {\r\n        this.index++\r\n      }\r\n\r\n      if (this.possible && this.index >= this.possible.length) {\r\n        this.index = 0\r\n      }\r\n\r\n      if (this.possible) {\r\n        if (e) e.preventDefault()\r\n        let dupe = this.words\r\n        let completion = this.possible[this.index]\r\n        let prev = ''\r\n\r\n        if (dupe.length > 1) {\r\n          prev = dupe[this.wordPos - 1]\r\n        }\r\n\r\n        let res = this.format(completion, prev, this.wordPos)\r\n        dupe[this.wordPos] = res.word\r\n        if (res.prev) dupe[this.wordPos - 1] = res.prev\r\n\r\n        let newPos = this.words.slice(0, this.wordPos + 1).join(' ').length\r\n        this.localValue = dupe.join(' ')\r\n        this.localValue =\r\n          this.localValue.slice(0, newPos) + this.localValue.slice(newPos + 1)\r\n        this.updateValue(this.localValue)\r\n        this.$nextTick(() => this.selectRange(newPos, newPos))\r\n      }\r\n    },\r\n\r\n    updateValue(value) {\r\n      this.localValue = value\r\n      this.$emit('input', value)\r\n    },\r\n\r\n    selectRange(start, end) {\r\n      this.$el.focus()\r\n      this.$el.setSelectionRange(start, end)\r\n    },\r\n\r\n    getCursorPos() {\r\n      return this.$el.selectionStart\r\n    }\r\n  }\r\n})\r\n"],"names":["Triejs","opts","key","this","options","enableCache","insertOrder","returnRoot","insert","sort","clip","copy","merge","root","index","hasOwnProperty","target","data","d","o","length","push","a","b","max","splice","slice","word","i","ii","call","_addCacheData","curr","$d","_addSuffix","suffix","letter","charAt","nextSuffix","substring","$s","_moveSuffix","_getDataAtNode","node","_getSubtree","_stripInsertOrder","undefined","temp","res","nodeArray","pop","newNode","add","arguments","toLowerCase","contains","find","prefix","indexOf","Vue","extend","name","trie","TrieJS","position","wordPos","words","dynamicData","possible","saved","localValue","value","render","h","self","ref","attrs","$props","domProps","directives","expression","on","$listeners","keydown","tabComplete","input","event","$emit","created","dataSource","Function","setData","props","default","format","prev","pos","type","String","watch","methods","array","forEach","element","_this","e","_this3","preventDefault","dupe","newPos","join","updateValue","$nextTick","selectRange","keyCode","getCursorPos","newValue","split","lcount","start","end","$el","focus","setSelectionRange","selectionStart"],"mappings":"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"}