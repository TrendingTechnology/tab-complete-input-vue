{"version":3,"file":"tab-complete-input.mjs","sources":["../src/lib/trie.js","../src/tab-complete-input.js"],"sourcesContent":["/**\r\n* Copyright (C) 2012 Paul Thurlow\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy \r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n* \r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n* \r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n/**\r\n* @decription Trie class for saving data by keywords accessible through\r\n*   word prefixes\r\n* @class\r\n* @version 0.1.5\r\n*/\r\nclass Triejs {\r\n  constructor(opts) {\r\n\r\n    /**\r\n    * @private\r\n    * @description Options for trie implementation\r\n    * @type {Object}\r\n    */\r\n    this.options = {\r\n    \r\n      /**\r\n      * @description Maximum number of items to cache per node\r\n      * @type {Number}\r\n      */\r\n      maxCache: 10\r\n\r\n      /**\r\n      * @description Whether to handle caching on node levels\r\n      * @type {Boolean}\r\n      */\r\n      , enableCache: true\r\n\r\n      /**\r\n      * @description Maintain insert ordering when adding to non cached trie\r\n      * @type {Boolean}\r\n      */\r\n      , insertOrder: false\r\n\r\n      /**\r\n      * @description Return responses from root when requests is empty\r\n      * @type {Boolean}\r\n      */\r\n      , returnRoot: false\r\n\r\n      /**\r\n      * @description Insert function for adding new items to cache\r\n      * @type {Function}\r\n      */\r\n      , insert: null\r\n\r\n      /**\r\n      * @description Sorting function for sorting items to cache\r\n      * @type {Function}\r\n      */\r\n      , sort: null\r\n\r\n      /**\r\n      * @description Clip function for removing old items from cache\r\n      * @type {Function}\r\n      */\r\n      , clip: null\r\n\r\n      /**\r\n      * @description copy function for copying data between nodes\r\n      * @type {Function}\r\n      */\r\n      , copy: null\r\n\r\n      /**\r\n      * @description Merge function to merge two data sets together\r\n      * @type {Function}\r\n      */\r\n      , merge: null\r\n    };\r\n\r\n    /**\r\n    * @private\r\n    * @description trie object\r\n    * @type {Object}\r\n    */\r\n    this.root = {};\r\n\r\n    /**\r\n    * @private\r\n    * @description insert order index\r\n    * @type {Number}\r\n    */\r\n    this.index = 0;\r\n\r\n    // mixin optional override options\r\n    for (const key in opts) {\r\n      if (opts.hasOwnProperty(key)) {\r\n        this.options[key] = opts[key];\r\n      }\r\n    };\r\n\r\n    if (typeof this.options.insert != 'function') {\r\n      this.options.insert = function(target, data) {\r\n        // if maintaining insert ordering add a order index on insert\r\n        if (this.options.insertOrder \r\n          && typeof data.d === 'undefined' \r\n          && typeof data.o === 'undefined') {\r\n          data = { d: data, o: this.index++ };\r\n        }\r\n        if (target && target.length) {\r\n          target.push(data);\r\n        } else {\r\n          target = [data];\r\n        }\r\n        return target;\r\n      };\r\n    }\r\n    if (typeof this.options.sort != 'function') {\r\n      if (!this.options.insertOrder) {\r\n        this.options.sort = function() {\r\n          this.sort();\r\n        };\r\n      } else if (this.options.insertOrder) {\r\n        this.options.sort = function() {\r\n          this.sort((a, b) => a.o - b.o);\r\n        }\r\n      }\r\n    }\r\n    if (typeof this.options.clip != 'function') {\r\n      this.options.clip = function(max) {\r\n        if (this.length > max) {\r\n          this.splice(max, this.length - max);\r\n        }\r\n      };\r\n    }\r\n    if (typeof this.options.copy != 'function') {\r\n      this.options.copy = data => data.slice(0)\r\n    }\r\n    if (typeof this.options.merge != 'function') {\r\n      this.options.merge = function(target, data, word) {\r\n        for (let i = 0, ii = data.length; i < ii; i++) {\r\n          target = this.options.insert.call(this, target, data[i]);\r\n          this.options.sort.call(target, word);\r\n          this.options.clip.call(target, this.options.maxCache);\r\n        }\r\n        return target;\r\n      }\r\n    }\r\n  }\r\n\r\n  /*-------------------------------------------------------------------------\r\n  * Private Functions\r\n  -------------------------------------------------------------------------*/\r\n\r\n  /**\r\n  * @description Add data to the current nodes cache\r\n  * @param curr {Object} current node in trie\r\n  * @param data {Object} Data to add to the cache\r\n  * @private\r\n  */\r\n  _addCacheData(curr, data) {\r\n    if ((this.root === curr && !this.options.returnRoot) \r\n      || this.options.enableCache === false) {\r\n      return false;\r\n    }\r\n    if (!curr.$d) {\r\n      curr.$d = {};\r\n    }\r\n    curr.$d = this.options.insert.call(this, curr.$d, data);\r\n    this.options.sort.call(curr.$d);\r\n    this.options.clip.call(curr.$d, this.options.maxCache);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @description Adds the remainder of a word to a subtree\r\n  * @param suffix {String} the remainder of a word\r\n  * @param data {Object} data to add at suffix\r\n  * @param curr {Object} current node in the trie\r\n  * @private\r\n  */\r\n  _addSuffix(suffix, data, curr) {\r\n    const letter = suffix.charAt(0);\r\n    const nextSuffix = suffix.substring(1) || null;\r\n    const opts = { $d: {} };\r\n    if (nextSuffix) {\r\n      opts.$s = nextSuffix;\r\n    }\r\n    if (typeof curr[letter] === 'undefined') {\r\n      curr[letter] = opts;\r\n    } else if (typeof curr[letter].$d === 'undefined') {\r\n      curr[letter].$d = {};\r\n      if (nextSuffix && typeof curr[letter].$s === 'undefined') {\r\n        curr[letter].$s = nextSuffix;\r\n      }\r\n    }\r\n    curr[letter].$d = this.options.insert.call(this, curr[letter].$d, data);\r\n    this.options.sort.call(curr[letter].$d);\r\n  }\r\n\r\n  /**\r\n  * @description Move data from current location to new suffix position\r\n  * @param suffix {String} the remainder of a word\r\n  * @param data {Object} data currently stored to be moved to suffix ending\r\n  * @param curr {Object} current node in the trie\r\n  * @private\r\n  */\r\n  _moveSuffix(suffix, data, curr) {\r\n    const letter = suffix.charAt(0);\r\n    const nextSuffix = suffix.substring(1) || null;\r\n    const opts = { $d: {} };\r\n    if (nextSuffix) {\r\n      opts.$s = nextSuffix;\r\n    }\r\n    if (typeof curr[letter] === 'undefined') {\r\n      curr[letter] = opts;\r\n    }\r\n    curr[letter].$d = this.options.copy(data);\r\n  }\r\n\r\n  /**\r\n  * @description Get data from a given node, either in the cache\r\n  *   or by parsing the subtree\r\n  * @param node {Object} The node to get data from\r\n  * @return {Array|Object} data results\r\n  */\r\n  _getDataAtNode(node, word) {\r\n      let data;\r\n\r\n      if (this.options.enableCache) {\r\n        this.options.sort.call(node.$d, word);\r\n        data = node.$d;\r\n      } else {\r\n        data = this._getSubtree(node, word);\r\n      }\r\n      if (this.options.insertOrder) {\r\n        data = this._stripInsertOrder(data);\r\n      }\r\n      return data ? this.options.copy(data) : undefined;\r\n    }\r\n\r\n  /**\r\n  * @description Remove the outer data later that stores insert order\r\n  * @param data {Object} The data with insert order object wrapper\r\n  * @return {Array} data results without insert order wrapper\r\n  */\r\n  _stripInsertOrder(data) {\r\n      if (typeof data == 'undefined') {\r\n        return;\r\n      }\r\n      const temp = [];\r\n      for (let i = 0, ii = data.length; i < ii; i++) {\r\n        temp.push(data[i].d);\r\n      }\r\n      return temp;\r\n    }\r\n\r\n  /**\r\n  * @description Get the subtree data of a trie traversing depth first\r\n  * @param curr {Object} current node in the trie to get data under\r\n  * @return {Object} data from the subtree\r\n  */\r\n  _getSubtree(curr, word) {\r\n    let res;\r\n    const nodeArray = [curr];\r\n    let node;\r\n    while (node = nodeArray.pop()) {\r\n      for (const newNode in node) {\r\n        if (node.hasOwnProperty(newNode)) {\r\n          if (newNode == '$d') {\r\n            if (typeof res == 'undefined') {\r\n              res = [];\r\n            }\r\n            res = this.options.merge.call(this, res, node.$d, word);\r\n          } else if (newNode != '$s') {\r\n            nodeArray.push(node[newNode]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /*-------------------------------------------------------------------------\r\n  * Public Functions\r\n  -------------------------------------------------------------------------*/\r\n\r\n  /**\r\n  * @description Adds a word into the trie\r\n  * @param word {String} word to add\r\n  * @param data {Object} data to store under given term\r\n  */\r\n  add(word, data) {\r\n      if (typeof word != 'string') { return false; }\r\n      if (arguments.length == 1) { data = word; }\r\n      word = word.toLowerCase();\r\n\r\n      let curr = this.root;\r\n\r\n      for (let i = 0, ii = word.length; i < ii; i++) {\r\n        const letter = word.charAt(i);\r\n        // No letter at this level\r\n        if (!curr[letter]) {\r\n          // Current level has a suffix already so push suffix lower in trie\r\n          if (curr.$s) {\r\n            if (curr.$s == word.substring(i)) {\r\n              // special case where word exists already, so we avoid breaking\r\n              // up the substring and store both at the top level\r\n              if (!this._addCacheData(curr, data)) {\r\n                curr.$d = this.options.insert.call(this, curr.$d, data);\r\n                this.options.sort.call(curr.$d);\r\n              }\r\n              break;\r\n            }\r\n            this._moveSuffix(curr.$s, curr.$d, curr);\r\n            delete curr.$s;\r\n            if (this.options.enableCache === false) {\r\n              delete curr.$d;\r\n            }\r\n          }\r\n          // Current level has no sub letter after building suffix\r\n          if (!curr[letter]) {\r\n            this._addSuffix(word.substring(i), data, curr);\r\n            this._addCacheData(curr, data);\r\n            break;\r\n          }\r\n          // add to the cache at the current node level in the trie\r\n          this._addCacheData(curr, data);\r\n          // if its the end of a word push possible suffixes at this node down\r\n          // and add data to cache at the words end\r\n          if (i == ii - 1) {\r\n            if (curr[letter].$s) {\r\n              this._moveSuffix(curr[letter].$s, curr[letter].$d, curr[letter]);\r\n              delete curr[letter].$s;\r\n              if (this.options.enableCache === false) {\r\n                delete curr[letter].$d;\r\n              }\r\n              // insert new data at current end of word node level\r\n              this._addSuffix(letter, data, curr);\r\n            } else {\r\n              // either add to cache or just add the data at end of word node\r\n              if (!this._addCacheData(curr[letter], data)) {\r\n                this._addSuffix(letter, data, curr);\r\n              }\r\n            }\r\n          }\r\n          curr = curr[letter];\r\n        }\r\n        // There is a letter and we are at the end of the word\r\n        else if (i == ii - 1) {\r\n          this._addCacheData(curr, data);\r\n          // either add to cache at the end of the word or just add the data\r\n          if (!this._addCacheData(curr[letter], data)) {\r\n            this._addSuffix(letter, data, curr);\r\n          }\r\n        }\r\n        // There is a letter so traverse lower into the trie\r\n        else {\r\n          this._addCacheData(curr, data);\r\n          curr = curr[letter];\r\n        }\r\n      }\r\n    }\r\n\r\n  /**\r\n  * @description remove a word from the trie if there is no caching\r\n  * @param word {String} word to remove from the trie\r\n  */\r\n  remove(word) {\r\n    if (typeof word !== 'string' || word === '' || this.options.enableCache){\r\n      return;\r\n    }\r\n    word = word.toLowerCase();\r\n    let letter;\r\n    let i;\r\n    let ii;\r\n    let curr = this.root;\r\n    let prev;\r\n    let prevLetter;\r\n    let data;\r\n    let count = 0;\r\n\r\n    for (i = 0, ii = word.length; i < ii; i++) {\r\n      letter = word.charAt(i);\r\n      if (!curr[letter]) {\r\n        if (curr.$s && curr.$s === word.substring(i)) {\r\n          break; // word is at this leaf node\r\n        } else {\r\n          return; // word not in the trie\r\n        }\r\n      } else {\r\n        prev = curr;\r\n        prevLetter = letter;\r\n        curr = curr[letter]\r\n      }\r\n    }\r\n    data = this.options.copy(curr.$d);\r\n    if (this.options.insertOrder) {\r\n      data = this._stripInsertOrder(data);\r\n    }\r\n    delete curr.$d;\r\n    delete curr.$s;\r\n    // enumerate all child nodes\r\n    for (const node in curr) {\r\n      if (curr.hasOwnProperty(node)) {\r\n        count++;\r\n      }\r\n    }\r\n    if (!count) {\r\n      delete prev[prevLetter]; // nothing left at this level so remove it\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n  * @description see if a word has been added to the trie\r\n  * @param word {String} word to search for\r\n  * @return {Boolean} whether word exists or not\r\n  */\r\n  contains(word) {\r\n      if (typeof word !== 'string' || word == '') { return false; }\r\n      word = word.toLowerCase();\r\n\r\n      let curr = this.root;\r\n      for (let i = 0, ii = word.length; i < ii; i++) {\r\n        const letter = word.charAt(i);\r\n        if (!curr[letter]) {\r\n          if (curr.$s && curr.$s === word.substring(i)) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        } else {\r\n          curr = curr[letter];\r\n        }\r\n      }\r\n      return curr.$d && (typeof curr.$s === 'undefined') ? true : false;\r\n    }\r\n\r\n  /**\r\n  * @description Get the data for a given prefix of a word\r\n  * @param prefix {String} string of the prefix of a word\r\n  * @return {Object} data for the given prefix\r\n  */\r\n  find(prefix) {\r\n      if (typeof prefix !== 'string') { return undefined; }\r\n      if (prefix == '' && !this.options.returnRoot) { return undefined; }\r\n      prefix = prefix.toLowerCase();\r\n\r\n      let curr = this.root;\r\n      for (let i = 0, ii = prefix.length; i < ii; i++) {\r\n        const letter = prefix.charAt(i);\r\n        if (!curr[letter]) {\r\n          if (curr.$s && curr.$s.indexOf(prefix.substring(i)) == 0) {\r\n            return this._getDataAtNode(curr, prefix);\r\n          } else {\r\n            return undefined;\r\n          }\r\n        } else {\r\n          curr = curr[letter];\r\n        }\r\n      }\r\n      return this._getDataAtNode(curr, prefix);\r\n    }\r\n}\r\n\r\nexport default Triejs","import TrieJS from \"./lib/trie\";\r\n\r\nexport default {\r\n  name: \"tab-complete-input\",\r\n  data () {\r\n    return {\r\n      trie: {},\r\n      position: 0,\r\n      wordPos: 0,\r\n      index: 0,\r\n      words: [],\r\n      word: \"\",\r\n      dynamicData: false,\r\n      possible: false,\r\n      saved: false,\r\n      localValue: this.value\r\n    };\r\n  },\r\n  render (h) {\r\n    var self = this\r\n    return h('input', {\r\n      ref: 'input',\r\n      attrs: {\r\n        ...self.$props\r\n      },\r\n      domProps: {\r\n        value: self.value\r\n      },\r\n      directives: [\r\n        { name: 'model', rawName: 'v-model', value: self.localValue, expression: 'value' }\r\n      ],\r\n      on: {\r\n        ...self.$listeners,\r\n        keydown: self.$listeners.keydown ? [ self.tabComplete, self.$listeners.keydown ] : self.tabComplete,\r\n        input (event) {\r\n          self.localValue = event.target.value\r\n          self.$emit('input', event.target.value)\r\n        }\r\n      }\r\n    })\r\n  },\r\n  created () {\r\n    this.dynamicData = this.dataSource instanceof Function;\r\n\r\n    if (!this.dynamicData) {\r\n      this.setData(this.dataSource);\r\n    }\r\n  },\r\n  props: {\r\n    dataSource: {\r\n      default: () => [],\r\n    },\r\n    format: {\r\n      default: (val, prev, pos) => ({ word: val, prev: prev }),\r\n      type: Function\r\n    }, \r\n    value: {\r\n      default: \"\", \r\n      type: String\r\n    }\r\n  },\r\n  watch: {\r\n    // whenever question changes, this function will run\r\n    dataSource (data) {\r\n      this.dynamicData = data instanceof Function;\r\n\r\n      if (!this.dynamicData) {\r\n        this.setData(data);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    setData (array) {\r\n      this.trie = new TrieJS();\r\n      array.forEach(element => {\r\n        this.trie.add(element);\r\n      });\r\n    },\r\n\r\n    async tabComplete (e) {\r\n      if (e && e.keyCode !== 9) {\r\n        this.saved = false;\r\n        this.index = 0;\r\n\r\n        return\r\n      }\r\n      if (!this.saved) {\r\n        this.position = this.getCursorPos();\r\n        const newValue = this.localValue.slice(0, this.position) + \" \" + this.localValue.slice(this.position);\r\n        \r\n        this.words = newValue.split(\" \");\r\n        var lcount = 0;\r\n        for (var i = 0; i < this.words.length; i++) {\r\n          var w = this.words[i];\r\n          lcount += w.length + 1;\r\n          if (lcount >= this.position) {\r\n            this.word = this.words[i];\r\n            this.wordPos = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (this.word != \"\" && e) {\r\n          e.preventDefault();\r\n        }\r\n\r\n        if (this.dynamicData) {\r\n          let data = this.dataSource(this.word, this.wordPos);\r\n          var array = await data;\r\n          this.setData(array);\r\n        }\r\n\r\n        this.saved = true;\r\n        this.possible = this.trie.find(this.word);\r\n      } else {\r\n        this.index++;\r\n      }\r\n\r\n      if (this.possible && this.index >= this.possible.length) {\r\n        this.index = 0;\r\n      }\r\n\r\n      if (this.possible) {\r\n        if (e) e.preventDefault();\r\n        let dupe = this.words;\r\n        let completion = this.possible[this.index];\r\n        let prev = \"\";\r\n\r\n        if (dupe.length > 1) {\r\n          prev = dupe[this.wordPos - 1];\r\n        }\r\n\r\n        let res = this.format(completion, prev, this.wordPos);\r\n        dupe[this.wordPos] = res.word;\r\n        if (res.prev) dupe[this.wordPos - 1] = res.prev;\r\n\r\n        let newPos = this.words.slice(0, this.wordPos + 1).join(\" \").length;\r\n        this.localValue = dupe.join(\" \");\r\n        this.localValue = this.localValue.slice(0, newPos) + this.localValue.slice(newPos + 1)\r\n        this.updateValue(this.localValue);\r\n        this.$nextTick(() => this.selectRange(newPos, newPos));\r\n      }\r\n    },\r\n\r\n    updateValue (value) {\r\n      this.localValue = value\r\n      this.$emit('input', value)\r\n    }, \r\n\r\n    selectRange (start, end) {\r\n      this.$el.focus();\r\n      this.$el.setSelectionRange(start, end);\r\n    },\r\n\r\n    getCursorPos () {\r\n      return this.$el.selectionStart;\r\n    }\r\n  }\r\n}\r\n"],"names":["Triejs","constructor","opts","const","key","options","root","index","hasOwnProperty","this","insert","target","data","insertOrder","d","o","length","push","sort","a","b","clip","max","splice","copy","slice","merge","word","let","i","ii","call","maxCache","_addCacheData","curr","returnRoot","enableCache","$d","_addSuffix","suffix","letter","charAt","nextSuffix","substring","$s","_moveSuffix","_getDataAtNode","node","_getSubtree","_stripInsertOrder","undefined","temp","res","nodeArray","pop","newNode","add","arguments","toLowerCase","remove","prev","prevLetter","count","contains","find","prefix","indexOf","name","trie","position","wordPos","words","dynamicData","possible","saved","localValue","value","render","h","self","ref","attrs","Object","$props","domProps","directives","rawName","expression","on","$listeners","keydown","tabComplete","input","event","$emit","created","dataSource","Function","setData","props","default","format","val","pos","type","String","watch","methods","array","TrieJS","forEach","element","e","_this","preventDefault","dupe","newPos","join","updateValue","$nextTick","selectRange","keyCode","getCursorPos","newValue","split","lcount","start","end","$el","focus","setSelectionRange","selectionStart"],"mappings":"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"}