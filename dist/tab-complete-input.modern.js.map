{"version":3,"file":"tab-complete-input.modern.js","sources":["../src/lib/trie.ts","../src/tab-complete-input.ts"],"sourcesContent":["/**\r\n * Copyright (C) 2012 Paul Thurlow\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\ninterface Options {\r\n  enableCache: boolean;\r\n  insertOrder: boolean;\r\n  returnRoot: boolean;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface Methods {\r\n  insert: Function;\r\n  sort: Function;\r\n  clip: Function;\r\n  copy: Function;\r\n  merge: Function;\r\n  [key: string]: any;\r\n}\r\n\r\nconst defaultOptions: Options = {\r\n  enableCache: true,\r\n  insertOrder: false,\r\n  returnRoot: false\r\n};\r\n\r\ninterface Data {\r\n  $d?: string | any;\r\n  $s?: string;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface Ordered {\r\n  d?: string;\r\n  o?: number;\r\n}\r\n\r\nfunction isOrdered(data: Ordered | any): data is Ordered {\r\n  return (data as Ordered).d !== undefined && (data as Ordered).o !== undefined;\r\n}\r\n\r\n/**\r\n * @decription Trie class for saving data by keywords accessible through\r\n *   word prefixes\r\n * @class\r\n * @version 0.1.5\r\n */\r\nclass TrieJS {\r\n  private options: Options | Methods = defaultOptions;\r\n  private root: Data = {};\r\n  private index = 0;\r\n\r\n  constructor(opts?: Options) {\r\n    // mixin optional override options\r\n    for (const key in opts) {\r\n      if (opts.hasOwnProperty(key)) {\r\n        this.options[key] = opts[key];\r\n      }\r\n    }\r\n\r\n    if (typeof this.options.insert != \"function\") {\r\n      this.options.insert = (target: any[], item: string) => {\r\n        // if maintaining insert ordering add a order index on insert\r\n        let data: Ordered | string;\r\n        if (this.options.insertOrder && !isOrdered(item)) {\r\n          data = { d: item, o: this.index++ };\r\n        }\r\n        if (target && target.length) {\r\n          target.push(item);\r\n        } else {\r\n          target = [item];\r\n        }\r\n        return target;\r\n      };\r\n    }\r\n\r\n    if (typeof this.options.sort != \"function\") {\r\n      if (!this.options.insertOrder) {\r\n        this.options.sort = function(this: Data[]) {\r\n          this.sort();\r\n        };\r\n      } else if (this.options.insertOrder) {\r\n        this.options.sort = function(this: Data[]) {\r\n          this.sort((a, b) => {\r\n            if (a.o === undefined || b.o === undefined) {\r\n              return 0;\r\n            }\r\n\r\n            return a.o - b.o;\r\n          });\r\n        };\r\n      }\r\n    }\r\n\r\n    if (typeof this.options.clip != \"function\") {\r\n      this.options.clip = function(this: Data[], max: number) {\r\n        if (this.length > max) {\r\n          this.splice(max, this.length - max);\r\n        }\r\n      };\r\n    }\r\n\r\n    if (typeof this.options.copy != \"function\") {\r\n      this.options.copy = (data: any[]) => data.slice(0);\r\n    }\r\n\r\n    if (typeof this.options.merge != \"function\") {\r\n      this.options.merge = (target: Data[], data: any, word: string) => {\r\n        for (let i = 0, ii = data.length; i < ii; i++) {\r\n          target = this.options.insert.call(this, target, data[i]);\r\n          this.options.sort.call(target, word);\r\n        }\r\n        return target;\r\n      };\r\n    }\r\n  }\r\n\r\n  /*-------------------------------------------------------------------------\r\n    * Private Functions\r\n    -------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * @description Add data to the current nodes cache\r\n   * @param curr {Object} current node in trie\r\n   * @param data {Object} Data to add to the cache\r\n   * @private\r\n   */\r\n  private _addCacheData(curr: Data, data: Data) {\r\n    if (\r\n      (this.root === curr && !this.options.returnRoot) ||\r\n      this.options.enableCache === false\r\n    ) {\r\n      return false;\r\n    }\r\n    if (!curr.$d) {\r\n      curr.$d = {};\r\n    }\r\n\r\n    curr.$d = this.options.insert.call(this, curr.$d, data);\r\n    this.options.sort.call(curr.$d);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @description Adds the remainder of a word to a subtree\r\n   * @param suffix {String} the remainder of a word\r\n   * @param data {Object} data to add at suffix\r\n   * @param curr {Object} current node in the trie\r\n   * @private\r\n   */\r\n  private _addSuffix(suffix: string, data: Data, curr: Data) {\r\n    const letter = suffix.charAt(0);\r\n    const nextSuffix = suffix.substring(1) || null;\r\n    const opts: Data = { $d: {} };\r\n    if (nextSuffix) {\r\n      opts.$s = nextSuffix;\r\n    }\r\n    if (typeof curr[letter] === \"undefined\") {\r\n      curr[letter] = opts;\r\n    } else if (typeof curr[letter].$d === \"undefined\") {\r\n      curr[letter].$d = {};\r\n      if (nextSuffix && typeof curr[letter].$s === \"undefined\") {\r\n        curr[letter].$s = nextSuffix;\r\n      }\r\n    }\r\n    curr[letter].$d = this.options.insert.call(this, curr[letter].$d, data);\r\n    this.options.sort.call(curr[letter].$d);\r\n  }\r\n\r\n  /**\r\n   * @description Move data from current location to new suffix position\r\n   * @param suffix {String} the remainder of a word\r\n   * @param data {Object} data currently stored to be moved to suffix ending\r\n   * @param curr {Object} current node in the trie\r\n   * @private\r\n   */\r\n  private _moveSuffix(suffix: string, data: Data, curr: Data) {\r\n    const letter = suffix.charAt(0);\r\n    const nextSuffix = suffix.substring(1) || null;\r\n    const opts: Data = { $d: {} };\r\n    if (nextSuffix) {\r\n      opts.$s = nextSuffix;\r\n    }\r\n    if (typeof curr[letter] === \"undefined\") {\r\n      curr[letter] = opts;\r\n    }\r\n    curr[letter].$d = this.options.copy(data);\r\n  }\r\n\r\n  /**\r\n   * @description Get data from a given node, either in the cache\r\n   *   or by parsing the subtree\r\n   * @param node {Object} The node to get data from\r\n   * @return {Array|Object} data results\r\n   */\r\n  private _getDataAtNode(node: Data, word: string) {\r\n    let data;\r\n\r\n    if (this.options.enableCache) {\r\n      this.options.sort.call(node.$d, word);\r\n      data = node.$d;\r\n    } else {\r\n      data = this._getSubtree(node, word);\r\n    }\r\n    if (this.options.insertOrder) {\r\n      data = this._stripInsertOrder(data);\r\n    }\r\n    return data ? this.options.copy(data) : undefined;\r\n  }\r\n\r\n  /**\r\n   * @description Remove the outer data later that stores insert order\r\n   * @param data {Object} The data with insert order object wrapper\r\n   * @return {Array} data results without insert order wrapper\r\n   */\r\n  private _stripInsertOrder(data: Ordered[]) {\r\n    if (typeof data == \"undefined\") {\r\n      return;\r\n    }\r\n    const temp = [];\r\n    for (let i = 0, ii = data.length; i < ii; i++) {\r\n      temp.push(data[i].d);\r\n    }\r\n    return temp;\r\n  }\r\n\r\n  /**\r\n   * @description Get the subtree data of a trie traversing depth first\r\n   * @param curr {Object} current node in the trie to get data under\r\n   * @return {Object} data from the subtree\r\n   */\r\n  private _getSubtree(curr: Data, word: string) {\r\n    let res: Data = [];\r\n    const nodeArray = [curr];\r\n    let node;\r\n    while ((node = nodeArray.pop())) {\r\n      for (const newNode in node) {\r\n        if (node.hasOwnProperty(newNode)) {\r\n          if (newNode == \"$d\") {\r\n            res = this.options.merge.call(this, res, node.$d, word);\r\n          } else if (newNode != \"$s\") {\r\n            nodeArray.push(node[newNode]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /*-------------------------------------------------------------------------\r\n    * Public Functions\r\n    -------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * @description Adds a word into the trie\r\n   * @param word {String} word to add\r\n   * @param data {Object} data to store under given term\r\n   */\r\n  add(word: string, data?: any) {\r\n    if (typeof word != \"string\") {\r\n      return false;\r\n    }\r\n    if (arguments.length == 1) {\r\n      data = word;\r\n    }\r\n    word = word.toLowerCase();\r\n\r\n    let curr = this.root;\r\n\r\n    for (let i = 0, ii = word.length; i < ii; i++) {\r\n      const letter = word.charAt(i);\r\n      // No letter at this level\r\n      if (!curr[letter]) {\r\n        // Current level has a suffix already so push suffix lower in trie\r\n        if (curr.$s) {\r\n          if (curr.$s == word.substring(i)) {\r\n            // special case where word exists already, so we avoid breaking\r\n            // up the substring and store both at the top level\r\n            if (!this._addCacheData(curr, data)) {\r\n              curr.$d = this.options.insert.call(this, curr.$d, data);\r\n              this.options.sort.call(curr.$d);\r\n            }\r\n            break;\r\n          }\r\n          this._moveSuffix(curr.$s, curr.$d, curr);\r\n          delete curr.$s;\r\n          if (this.options.enableCache === false) {\r\n            delete curr.$d;\r\n          }\r\n        }\r\n        // Current level has no sub letter after building suffix\r\n        if (!curr[letter]) {\r\n          this._addSuffix(word.substring(i), data, curr);\r\n          this._addCacheData(curr, data);\r\n          break;\r\n        }\r\n        // add to the cache at the current node level in the trie\r\n        this._addCacheData(curr, data);\r\n        // if its the end of a word push possible suffixes at this node down\r\n        // and add data to cache at the words end\r\n        if (i == ii - 1) {\r\n          if (curr[letter].$s) {\r\n            this._moveSuffix(curr[letter].$s, curr[letter].$d, curr[letter]);\r\n            delete curr[letter].$s;\r\n            if (this.options.enableCache === false) {\r\n              delete curr[letter].$d;\r\n            }\r\n            // insert new data at current end of word node level\r\n            this._addSuffix(letter, data, curr);\r\n          } else {\r\n            // either add to cache or just add the data at end of word node\r\n            if (!this._addCacheData(curr[letter], data)) {\r\n              this._addSuffix(letter, data, curr);\r\n            }\r\n          }\r\n        }\r\n        curr = curr[letter];\r\n      }\r\n      // There is a letter and we are at the end of the word\r\n      else if (i == ii - 1) {\r\n        this._addCacheData(curr, data);\r\n        // either add to cache at the end of the word or just add the data\r\n        if (!this._addCacheData(curr[letter], data)) {\r\n          this._addSuffix(letter, data, curr);\r\n        }\r\n      }\r\n      // There is a letter so traverse lower into the trie\r\n      else {\r\n        this._addCacheData(curr, data);\r\n        curr = curr[letter];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description see if a word has been added to the trie\r\n   * @param word {String} word to search for\r\n   * @return {Boolean} whether word exists or not\r\n   */\r\n  contains(word: string) {\r\n    if (typeof word !== \"string\" || word == \"\") {\r\n      return false;\r\n    }\r\n    word = word.toLowerCase();\r\n\r\n    let curr = this.root;\r\n    for (let i = 0, ii = word.length; i < ii; i++) {\r\n      const letter = word.charAt(i);\r\n      if (!curr[letter]) {\r\n        if (curr.$s && curr.$s === word.substring(i)) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } else {\r\n        curr = curr[letter];\r\n      }\r\n    }\r\n    return curr.$d && typeof curr.$s === \"undefined\" ? true : false;\r\n  }\r\n\r\n  /**\r\n   * @description Get the data for a given prefix of a word\r\n   * @param prefix {String} string of the prefix of a word\r\n   * @return {Array|Object} data for the given prefix\r\n   */\r\n  find(prefix: string) {\r\n    if (typeof prefix !== \"string\") {\r\n      return undefined;\r\n    }\r\n    if (prefix == \"\" && !this.options.returnRoot) {\r\n      return undefined;\r\n    }\r\n    prefix = prefix.toLowerCase();\r\n\r\n    let curr = this.root;\r\n    for (let i = 0, ii = prefix.length; i < ii; i++) {\r\n      const letter = prefix.charAt(i);\r\n      if (!curr[letter]) {\r\n        if (curr.$s && curr.$s.indexOf(prefix.substring(i)) == 0) {\r\n          return this._getDataAtNode(curr, prefix);\r\n        } else {\r\n          return undefined;\r\n        }\r\n      } else {\r\n        curr = curr[letter];\r\n      }\r\n    }\r\n    return this._getDataAtNode(curr, prefix);\r\n  }\r\n}\r\n\r\nexport default TrieJS;\r\n","import TrieJS from './lib/trie'\r\nimport Vue, { PropType } from 'vue'\r\n\r\ninterface FormatResult {\r\n  word: String\r\n  prev: String\r\n}\r\n\r\nconst FormatFunction = (word: String, prev: String, pos: Number): FormatResult => ({ word, prev })\r\n\r\nexport default Vue.extend({\r\n  name: 'tab-complete-input',\r\n  data() {\r\n    return {\r\n      trie: new TrieJS(),\r\n      position: 0,\r\n      wordPos: 0,\r\n      index: 0,\r\n      words: [],\r\n      word: '',\r\n      dynamicData: false,\r\n      possible: false,\r\n      saved: false,\r\n      localValue: this.value\r\n    } as any\r\n  },\r\n  render(h) {\r\n    const self: any = this\r\n    const keydown = self.$listeners.keydown\r\n      ? [self.tabComplete, self.$listeners.keydown]\r\n      : self.tabComplete\r\n\r\n    return h('input', {\r\n      ref: 'input',\r\n      attrs: {\r\n        ...self.$props\r\n      },\r\n      domProps: {\r\n        value: self.value\r\n      },\r\n      directives: [\r\n        {\r\n          name: 'model',\r\n          value: self.localValue,\r\n          expression: 'value'\r\n        }\r\n      ],\r\n      on: {\r\n        ...self.$listeners,\r\n        keydown,\r\n        input(event: any) {\r\n          self.localValue = event.target.value\r\n          self.$emit('input', event.target.value)\r\n        }\r\n      }\r\n    })\r\n  },\r\n  created() {\r\n    this.dynamicData = this.dataSource instanceof Function\r\n\r\n    if (!this.dynamicData) {\r\n      this.setData(this.dataSource)\r\n    }\r\n  },\r\n  props: {\r\n    dataSource: {\r\n      default: () => []\r\n    },\r\n    format: {\r\n      default: FormatFunction,\r\n      type: Function as PropType<typeof FormatFunction>\r\n    },\r\n    value: {\r\n      default: '',\r\n      type: String\r\n    }\r\n  },\r\n  watch: {\r\n    // whenever dataSource changes, this function will run\r\n    dataSource(data) {\r\n      this.dynamicData = data instanceof Function\r\n\r\n      if (!this.dynamicData) {\r\n        this.setData(data)\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    setData(array: string[]) {\r\n      this.trie = new TrieJS()\r\n      array.forEach(element => {\r\n        this.trie.add(element)\r\n      })\r\n    },\r\n\r\n    async tabComplete(e: KeyboardEvent) {\r\n      if (e && e.keyCode !== 9) {\r\n        this.saved = false\r\n        this.index = 0\r\n\r\n        return\r\n      }\r\n      if (!this.saved) {\r\n        this.position = this.getCursorPos()\r\n        const newValue =\r\n          this.localValue.slice(0, this.position) +\r\n          ' ' +\r\n          this.localValue.slice(this.position)\r\n\r\n        this.words = newValue.split(' ')\r\n        var lcount = 0\r\n        for (var i = 0; i < this.words.length; i++) {\r\n          var w = this.words[i]\r\n          lcount += w.length + 1\r\n          if (lcount >= this.position) {\r\n            this.word = this.words[i]\r\n            this.wordPos = i\r\n            break\r\n          }\r\n        }\r\n\r\n        if (this.word != '' && e) {\r\n          e.preventDefault()\r\n        }\r\n\r\n        if (this.dynamicData) {\r\n          let data = this.dataSource(this.word, this.wordPos)\r\n          var array = await data\r\n          this.setData(array)\r\n        }\r\n\r\n        this.saved = true\r\n        this.possible = this.trie.find(this.word)\r\n      } else {\r\n        this.index++\r\n      }\r\n\r\n      if (this.possible && this.index >= this.possible.length) {\r\n        this.index = 0\r\n      }\r\n\r\n      if (this.possible) {\r\n        if (e) e.preventDefault()\r\n        let dupe = this.words\r\n        let completion = this.possible[this.index]\r\n        let prev = ''\r\n\r\n        if (dupe.length > 1) {\r\n          prev = dupe[this.wordPos - 1]\r\n        }\r\n\r\n        let res = this.format(completion, prev, this.wordPos)\r\n        dupe[this.wordPos] = res.word\r\n        if (res.prev) dupe[this.wordPos - 1] = res.prev\r\n\r\n        let newPos = this.words.slice(0, this.wordPos + 1).join(' ').length\r\n        this.localValue = dupe.join(' ')\r\n        this.localValue =\r\n          this.localValue.slice(0, newPos) + this.localValue.slice(newPos + 1)\r\n        this.updateValue(this.localValue)\r\n        this.$nextTick(() => this.selectRange(newPos, newPos))\r\n      }\r\n    },\r\n\r\n    updateValue(value: string) {\r\n      this.localValue = value\r\n      this.$emit('input', value)\r\n    },\r\n\r\n    selectRange(start: number, end: number) {\r\n      this.$el.focus()\r\n      this.$el.setSelectionRange(start, end)\r\n    },\r\n\r\n    getCursorPos() {\r\n      return this.$el.selectionStart\r\n    }\r\n  }\r\n})\r\n"],"names":["defaultOptions","enableCache","insertOrder","returnRoot","TrieJS","constructor","opts","this","key","hasOwnProperty","options","insert","target","item","data","undefined","d","o","isOrdered","index","length","push","sort","a","b","clip","max","splice","copy","slice","merge","word","i","ii","call","_addCacheData","curr","root","$d","_addSuffix","suffix","letter","charAt","nextSuffix","substring","$s","_moveSuffix","_getDataAtNode","node","_getSubtree","_stripInsertOrder","temp","res","nodeArray","pop","newNode","add","arguments","toLowerCase","contains","find","prefix","indexOf","f","Vue","extend","name","trie","position","wordPos","words","dynamicData","possible","saved","localValue","value","render","h","self","ref","attrs","$props","domProps","directives","expression","on","$listeners","keydown","tabComplete","input","event","$emit","created","dataSource","Function","setData","props","default","format","prev","pos","type","String","watch","methods","array","forEach","element","e","keyCode","_this","getCursorPos","newValue","split","lcount","preventDefault","then","dupe","newPos","join","updateValue","$nextTick","selectRange","start","end","$el","focus","setSelectionRange","selectionStart"],"mappings":"mBAsCA,MAAMA,EAA0B,CAC9BC,aAAa,EACbC,aAAa,EACbC,YAAY,GAwBd,MAAMC,EAKJC,YAAYC,GAJJC,aAA6BP,EAC7BO,UAAa,GACbA,WAAQ,EAId,IAAK,MAAMC,KAAOF,EACZA,EAAKG,eAAeD,KACtBD,KAAKG,QAAQF,GAAOF,EAAKE,IAIK,wBAAlBE,QAAQC,SACtBJ,KAAKG,QAAQC,OAAS,CAACC,EAAeC,KAEpC,IAAIC,EASJ,OARIP,KAAKG,QAAQR,cA3BzB,SAAmBY,GACjB,YAA+BC,IAAvBD,EAAiBE,QAA2CD,IAAvBD,EAAiBG,EA0BvBC,CAAUL,KACzCC,EAAO,CAAEE,EAAGH,EAAMI,EAAGV,KAAKY,UAExBP,GAAUA,EAAOQ,OACnBR,EAAOS,KAAKR,GAEZD,EAAS,CAACC,GAELD,IAIqB,wBAAhBF,QAAQY,OACjBf,KAAKG,QAAQR,YAIPK,KAAKG,QAAQR,cACtBK,KAAKG,QAAQY,KAAO,WAClBf,KAAKe,KAAK,CAACC,EAAGC,SACAT,IAARQ,EAAEN,QAA2BF,IAARS,EAAEP,IAIpBM,EAAEN,EAAIO,EAAEP,KAVnBV,KAAKG,QAAQY,KAAO,WAClBf,KAAKe,SAeqB,wBAAhBZ,QAAQe,OACtBlB,KAAKG,QAAQe,KAAO,SAAuBC,GACrCnB,KAAKa,OAASM,GAChBnB,KAAKoB,OAAOD,EAAKnB,KAAKa,OAASM,KAKL,wBAAhBhB,QAAQkB,OACtBrB,KAAKG,QAAQkB,KAAQd,GAAgBA,EAAKe,MAAM,IAGjB,wBAAjBnB,QAAQoB,QACtBvB,KAAKG,QAAQoB,MAAQ,CAAClB,EAAgBE,EAAWiB,KAC/C,IAAK,IAAIC,EAAI,EAAGC,EAAKnB,EAAKM,OAAQY,EAAIC,EAAID,IACxCpB,EAASL,KAAKG,QAAQC,OAAOuB,KAAK3B,KAAMK,EAAQE,EAAKkB,IACrDzB,KAAKG,QAAQY,KAAKY,KAAKtB,EAAQmB,GAEjC,OAAOnB,IAeLuB,cAAcC,EAAYtB,GAChC,QACGP,KAAK8B,OAASD,IAAS7B,KAAKG,QAAQP,aACR,IAA7BI,KAAKG,QAAQT,cAIVmC,EAAKE,KACRF,EAAKE,GAAK,IAGZF,EAAKE,GAAK/B,KAAKG,QAAQC,OAAOuB,KAAK3B,KAAM6B,EAAKE,GAAIxB,GAClDP,KAAKG,QAAQY,KAAKY,KAAKE,EAAKE,QAWtBC,WAAWC,EAAgB1B,EAAYsB,GAC7C,MAAMK,EAASD,EAAOE,OAAO,GACvBC,EAAaH,EAAOI,UAAU,IAAM,KACpCtC,EAAa,CAAEgC,GAAI,IACrBK,IACFrC,EAAKuC,GAAKF,QAEgB,IAAjBP,EAAKK,GACdL,EAAKK,GAAUnC,OACqB,IAApB8B,EAAKK,GAAQH,KAC7BF,EAAKK,GAAQH,GAAK,GACdK,QAAyC,IAApBP,EAAKK,GAAQI,KACpCT,EAAKK,GAAQI,GAAKF,IAGtBP,EAAKK,GAAQH,GAAK/B,KAAKG,QAAQC,OAAOuB,KAAK3B,KAAM6B,EAAKK,GAAQH,GAAIxB,GAClEP,KAAKG,QAAQY,KAAKY,KAAKE,EAAKK,GAAQH,IAU9BQ,YAAYN,EAAgB1B,EAAYsB,GAC9C,MAAMK,EAASD,EAAOE,OAAO,GACvBC,EAAaH,EAAOI,UAAU,IAAM,KACpCtC,EAAa,CAAEgC,GAAI,IACrBK,IACFrC,EAAKuC,GAAKF,QAEgB,IAAjBP,EAAKK,KACdL,EAAKK,GAAUnC,GAEjB8B,EAAKK,GAAQH,GAAK/B,KAAKG,QAAQkB,KAAKd,GAS9BiC,eAAeC,EAAYjB,GACjC,IAAIjB,EAWJ,OATIP,KAAKG,QAAQT,aACfM,KAAKG,QAAQY,KAAKY,KAAKc,EAAKV,GAAIP,GAChCjB,EAAOkC,EAAKV,IAEZxB,EAAOP,KAAK0C,YAAYD,EAAMjB,GAE5BxB,KAAKG,QAAQR,cACfY,EAAOP,KAAK2C,kBAAkBpC,IAEzBA,EAAOP,KAAKG,QAAQkB,KAAKd,QAAQC,EAQlCmC,kBAAkBpC,GACxB,QAAmB,IAARA,EACT,OAEF,MAAMqC,EAAO,GACb,IAAK,IAAInB,EAAI,EAAGC,EAAKnB,EAAKM,OAAQY,EAAIC,EAAID,IACxCmB,EAAK9B,KAAKP,EAAKkB,GAAGhB,GAEpB,OAAOmC,EAQDF,YAAYb,EAAYL,GAC9B,IAAIqB,EAAY,GAChB,MAAMC,EAAY,CAACjB,GACnB,IAAIY,EACJ,KAAQA,EAAOK,EAAUC,OACvB,IAAK,MAAMC,KAAWP,EAChBA,EAAKvC,eAAe8C,KACP,MAAXA,EACFH,EAAM7C,KAAKG,QAAQoB,MAAMI,KAAK3B,KAAM6C,EAAKJ,EAAKV,GAAIP,GAC9B,MAAXwB,GACTF,EAAUhC,KAAK2B,EAAKO,KAK5B,OAAOH,EAYTI,IAAIzB,EAAcjB,GAChB,GAAmB,iBAARiB,EACT,SAEsB,GAApB0B,UAAUrC,SACZN,EAAOiB,GAETA,EAAOA,EAAK2B,cAEZ,IAAItB,EAAO7B,KAAK8B,KAEhB,IAAK,IAAIL,EAAI,EAAGC,EAAKF,EAAKX,OAAQY,EAAIC,EAAID,IAAK,CAC7C,MAAMS,EAASV,EAAKW,OAAOV,GAE3B,GAAKI,EAAKK,GA+CDT,GAAKC,EAAK,GACjB1B,KAAK4B,cAAcC,EAAMtB,GAEpBP,KAAK4B,cAAcC,EAAKK,GAAS3B,IACpCP,KAAKgC,WAAWE,EAAQ3B,EAAMsB,KAKhC7B,KAAK4B,cAAcC,EAAMtB,GACzBsB,EAAOA,EAAKK,QAzDK,CAEjB,GAAIL,EAAKS,GAAI,CACX,GAAIT,EAAKS,IAAMd,EAAKa,UAAUZ,GAAI,CAG3BzB,KAAK4B,cAAcC,EAAMtB,KAC5BsB,EAAKE,GAAK/B,KAAKG,QAAQC,OAAOuB,KAAK3B,KAAM6B,EAAKE,GAAIxB,GAClDP,KAAKG,QAAQY,KAAKY,KAAKE,EAAKE,KAE9B,MAEF/B,KAAKuC,YAAYV,EAAKS,GAAIT,EAAKE,GAAIF,UAC5BA,EAAKS,IACqB,IAA7BtC,KAAKG,QAAQT,oBACRmC,EAAKE,GAIhB,IAAKF,EAAKK,GAAS,CACjBlC,KAAKgC,WAAWR,EAAKa,UAAUZ,GAAIlB,EAAMsB,GACzC7B,KAAK4B,cAAcC,EAAMtB,GACzB,MAGFP,KAAK4B,cAAcC,EAAMtB,GAGrBkB,GAAKC,EAAK,IACRG,EAAKK,GAAQI,IACftC,KAAKuC,YAAYV,EAAKK,GAAQI,GAAIT,EAAKK,GAAQH,GAAIF,EAAKK,WACjDL,EAAKK,GAAQI,IACa,IAA7BtC,KAAKG,QAAQT,oBACRmC,EAAKK,GAAQH,GAGtB/B,KAAKgC,WAAWE,EAAQ3B,EAAMsB,IAGzB7B,KAAK4B,cAAcC,EAAKK,GAAS3B,IACpCP,KAAKgC,WAAWE,EAAQ3B,EAAMsB,IAIpCA,EAAOA,EAAKK,KAuBlBkB,SAAS5B,GACP,GAAoB,iBAATA,GAA6B,IAARA,EAC9B,SAEFA,EAAOA,EAAK2B,cAEZ,IAAItB,EAAO7B,KAAK8B,KAChB,IAAK,IAAIL,EAAI,EAAGC,EAAKF,EAAKX,OAAQY,EAAIC,EAAID,IAAK,CAC7C,MAAMS,EAASV,EAAKW,OAAOV,GAC3B,IAAKI,EAAKK,GACR,SAAIL,EAAKS,IAAMT,EAAKS,KAAOd,EAAKa,UAAUZ,IAM1CI,EAAOA,EAAKK,GAGhB,SAAOL,EAAKE,SAAyB,IAAZF,EAAKS,IAQhCe,KAAKC,GACH,GAAsB,iBAAXA,EACT,OAEF,GAAc,IAAVA,IAAiBtD,KAAKG,QAAQP,WAChC,OAEF0D,EAASA,EAAOH,cAEhB,IAAItB,EAAO7B,KAAK8B,KAChB,IAAK,IAAIL,EAAI,EAAGC,EAAK4B,EAAOzC,OAAQY,EAAIC,EAAID,IAAK,CAC/C,MAAMS,EAASoB,EAAOnB,OAAOV,GAC7B,IAAKI,EAAKK,GACR,OAAIL,EAAKS,IAA8C,GAAxCT,EAAKS,GAAGiB,QAAQD,EAAOjB,UAAUZ,SAClCe,eAAeX,EAAMyB,QAEjC,EAGFzB,EAAOA,EAAKK,GAGhB,YAAYM,eAAeX,EAAMyB,8DC5YrC,IAqEmBE,IArEJC,EAAIC,OAAO,CACxBC,KAAM,qBACNpD,OACE,MAAO,CACLqD,KAAM,IAAI/D,EACVgE,SAAU,EACVC,QAAS,EACTlD,MAAO,EACPmD,MAAO,GACPvC,KAAM,GACNwC,aAAa,EACbC,UAAU,EACVC,OAAO,EACPC,WAAYnE,KAAKoE,QAGrBC,OAAOC,GACL,MAAMC,EAAYvE,KAKlB,OAAOsE,EAAE,QAAS,CAChBE,IAAK,QACLC,MAAO,IACFF,EAAKG,QAEVC,SAAU,CACRP,MAAOG,EAAKH,OAEdQ,WAAY,CACV,CACEjB,KAAM,QACNS,MAAOG,EAAKJ,WACZU,WAAY,UAGhBC,GAAI,IACCP,EAAKQ,WACRC,QArBYT,EAAKQ,WAAWC,QAC5B,CAACT,EAAKU,YAAaV,EAAKQ,WAAWC,SACnCT,EAAKU,YAoBLC,MAAMC,GACJZ,EAAKJ,WAAagB,EAAM9E,OAAO+D,MAC/BG,EAAKa,MAAM,QAASD,EAAM9E,OAAO+D,YAKzCiB,UACErF,KAAKgE,YAAchE,KAAKsF,sBAAsBC,SAEzCvF,KAAKgE,aACRhE,KAAKwF,QAAQxF,KAAKsF,aAGtBG,MAAO,CACLH,WAAY,CACVI,QAAS,IAAM,IAEjBC,OAAQ,CACND,QA7DiB,CAAClE,EAAcoE,EAAcC,MAAiCrE,KAAAA,EAAMoE,KAAAA,IA8DrFE,KAAMP,UAERnB,MAAO,CACLsB,QAAS,GACTI,KAAMC,SAGVC,MAAO,CAELV,WAAW/E,GACTP,KAAKgE,YAAczD,aAAgBgF,SAE9BvF,KAAKgE,aACRhE,KAAKwF,QAAQjF,KAInB0F,QAAS,CACPT,QAAQU,GACNlG,KAAK4D,KAAO,IAAI/D,EAChBqG,EAAMC,QAAQC,IACZpG,KAAK4D,KAAKX,IAAImD,MAIZnB,aAhBSzB,WAgBG6C,WAEdrG,KADF,OAAIqG,GAAmB,IAAdA,EAAEC,SACTC,EAAKrC,OAAQ,OACbqC,EAAK3F,MAAQ,qBAIV2F,EAAKrC,OACRqC,EAAK1C,SAAW0C,EAAKC,eACrB,MAAMC,EACJF,EAAKpC,WAAW7C,MAAM,EAAGiF,EAAK1C,UAC9B,IACA0C,EAAKpC,WAAW7C,MAAMiF,EAAK1C,UAE7B0C,EAAKxC,MAAQ0C,EAASC,MAAM,KAE5B,IADA,IAAIC,EAAS,EACJlF,EAAI,EAAGA,EAAI8E,EAAKxC,MAAMlD,OAAQY,IAGrC,IADAkF,GADQJ,EAAKxC,MAAMtC,GACPZ,OAAS,IACP0F,EAAK1C,SAAU,OAC3B0C,EAAK/E,KAAO+E,EAAKxC,MAAMtC,QACvB8E,EAAKzC,QAAUrC,SAKF,IAAb8E,EAAK/E,MAAc6E,GACrBA,EAAEO,iCAGAL,EAAKvC,8BAEHkC,GACJK,EAAKf,QAAQU,OAFFK,EAAKjB,WAAWiB,EAAK/E,KAAM+E,EAAKzC,WA1B7CM,mCAGKyC,8BA4BLN,EAAKrC,OAAQ,EACbqC,EAAKtC,SAAWsC,EAAK3C,KAAKP,KAAKkD,EAAK/E,QAEpC+E,EAAK3F,uBAGH2F,EAAKtC,UAAYsC,EAAK3F,OAAS2F,EAAKtC,SAASpD,SAC/C0F,EAAK3F,MAAQ,GAGX2F,EAAKtC,UACHoC,GAAGA,EAAEO,iBACT,IAAIE,EAAOP,EAAKxC,MAEZ6B,EAAO,GAEPkB,EAAKjG,OAAS,IAChB+E,EAAOkB,EAAKP,EAAKzC,QAAU,IAG7B,IAAIjB,EAAM0D,EAAKZ,OAPEY,EAAKtC,SAASsC,EAAK3F,OAOFgF,EAAMW,EAAKzC,SAC7CgD,EAAKP,EAAKzC,SAAWjB,EAAIrB,KACrBqB,EAAI+C,OAAMkB,EAAKP,EAAKzC,QAAU,GAAKjB,EAAI+C,MAE3C,IAAImB,EAASR,EAAKxC,MAAMzC,MAAM,EAAGiF,EAAKzC,QAAU,GAAGkD,KAAK,KAAKnG,OAC7D0F,EAAKpC,WAAa2C,EAAKE,KAAK,KAC5BT,EAAKpC,WACHoC,EAAKpC,WAAW7C,MAAM,EAAGyF,GAAUR,EAAKpC,WAAW7C,MAAMyF,EAAS,GACpER,EAAKU,YAAYV,EAAKpC,YACtBoC,EAAKW,UAAU,IAAMX,EAAKY,YAAYJ,EAAQA,gCA9EtCtF,MAAWyB,mFAKzB,qCA6EE+D,YAAY7C,GACVpE,KAAKmE,WAAaC,EAClBpE,KAAKoF,MAAM,QAAShB,IAGtB+C,YAAYC,EAAeC,GACzBrH,KAAKsH,IAAIC,QACTvH,KAAKsH,IAAIE,kBAAkBJ,EAAOC,IAGpCb,eACE,YAAYc,IAAIG"}